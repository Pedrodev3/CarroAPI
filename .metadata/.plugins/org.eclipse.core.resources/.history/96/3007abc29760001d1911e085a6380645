package br.com.fiap.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

import br.com.fiap.factory.ConnectionFactory;
import br.com.fiap.to.UsuarioTO;

public class UsuarioDAO implements IDAO {

	private Connection con = null;
	private UsuarioTO usuario = null;

	public UsuarioDAO() {
		this.con = new ConnectionFactory().getConnection();
	}

	/**
	 * Validação de usuário a partir dos atributos DS_EMAIL e DS_SENHA no Banco de
	 * Dados
	 * 
	 * @throws SQLException
	 */
	public UsuarioTO loginDAO(UsuarioTO usuario) throws SQLException {
		


		String sql = "SELECT * FROM T_GS_USUARIO WHERE DS_EMAIL = ? AND DS_SENHA = ?";

		List<UsuarioTO> resul = new ArrayList<UsuarioTO>();

		PreparedStatement ps = null;

		try {
			ps = con.prepareStatement(sql);

			ps.setString(1, usuario.getDsEmail());
			ps.setString(2, usuario.getDsSenha());

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				usuario.setDsEmail(rs.getString(3));
				usuario.setDsSenha(rs.getString(4));
				resul.add(usuario);
			}

			for (int i = 0; i < resul.size(); i++) {
				if (resul.get(i).getDsEmail().equals(usuario.getDsEmail())
						&& resul.get(i).getDsSenha().equals(usuario.getDsSenha())) {
					return resul.get(i);
				}
			}
			rs.close();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			ps.close();
			con.close();
		}

		return null;
	}

	/**
	 * Cadastro de informações do usuário.
	 * 
	 * @throws SQLException
	 */
	public String insert(Object obj) throws SQLException {

		usuario = (UsuarioTO) obj;

		String sql = "INSERT INTO T_GS_USUARIO (ID_USUARIO, NM_COMPLETO, DS_EMAIL, DS_SENHA, NR_CPF) "
				+ "VALUES (SQ_GS_USUARIO.NEXTVAL, ?, ?, ?, ?)";

		PreparedStatement ps = null;

		try {
			ps = con.prepareStatement(sql);

			ps.setString(1, usuario.getNmCompleto());
			ps.setString(2, usuario.getDsEmail());
			ps.setString(3, usuario.getDsSenha());
			ps.setString(4, usuario.getNrCpf());

			if (ps.executeUpdate() > 0) {

				return "Inserido com sucesso.\n" + "Conexão Fechada!";
			} else {
				return "Error ao inserir.\n" + "Conexão Fechada!";
			}
		} catch (Exception e) {
			return e.getMessage();
		} finally {
			ps.close();
			con.close();
		}
	}

	/**
	 * Atualização de informações do usuário a partir da chave primária da tabela
	 * (T_GS_USUARIO) do banco de dados.
	 * 
	 * @throws SQLException
	 */
	public String update(Object obj) throws SQLException {

		usuario = (UsuarioTO) obj;

		String sql = "UPDATE T_GS_USUARIO SET NM_COMPLETO = ?, DS_EMAIL = ?, DS_SENHA = ?, NR_CPF = ? WHERE ID_USUARIO = ?";

		PreparedStatement ps = null;

		try {
			ps = con.prepareStatement(sql);

			ps.setString(1, usuario.getNmCompleto());
			ps.setString(2, usuario.getDsEmail());
			ps.setString(3, usuario.getDsSenha());
			ps.setString(4, usuario.getNrCpf());
			ps.setInt(5, usuario.getIdUsuario());

			if (ps.executeUpdate() > 0) {
				return "Atualizado com sucesso.\n" + "Conexão Fechada!";
			} else {
				return "Error ao alterar.\n" + "Conexão Fechada!";
			}
		} catch (Exception e) {
			return e.getMessage();
		} finally {
			ps.close();
			con.close();
		}
	}

	/**
	 * Método para deletar informações do usuário a partir da chave primária da
	 * tabela (T_GS_USUARIO) do banco de dados.
	 * 
	 * @throws SQLException
	 */
	public String delete(Integer id) throws SQLException {
		String sql = "DELETE FROM T_GS_USUARIO WHERE ID_USUARIO = ? ";

		PreparedStatement ps = null;

		try {
			ps = con.prepareStatement(sql);

			ps.setInt(1, id);

			if (ps.executeUpdate() > 0) {
				return "Excluido com sucesso!\n" + "Conexão Fechada!";
			} else {
				return "Erro ao excluir!\n" + "Conexão Fechada!";
			}
		} catch (SQLException e) {
			return e.getMessage();
		} finally {
			ps.close();
			con.close();
		}
	}

	/**
	 * Seleção de informações do usuário a partir da chave primária da tabela
	 * (T_GS_USUARIO) do banco de dados.
	 * 
	 * @throws SQLException
	 */
	public List<UsuarioTO> select(Integer id) throws SQLException {

		usuario = new UsuarioTO();

		String sql = "SELECT U.ID_USUARIO, U.NM_COMPLETO, U.DS_EMAIL, U.DS_SENHA, U.NR_CPF,"
				+ "TEL.NR_DDD, TEL.NR_DDI, TEL.NR_TELEFONE, TEL.ST_TELEFONE"
				+ " FROM T_GS_USUARIO U LEFT JOIN T_GS_TELEFONE TEL"
				+ " ON (U.ID_USUARIO = TEL.ID_USUARIO) WHERE U.ID_USUARIO = ?";

		List<UsuarioTO> resul = new ArrayList<UsuarioTO>();

		PreparedStatement ps = null;

		try {
			ps = con.prepareStatement(sql);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				usuario.setIdUsuario(rs.getInt(1));
				usuario.setNmCompleto(rs.getString(2));
				usuario.setDsEmail(rs.getString(3));
				usuario.setDsSenha(rs.getString(4));
				usuario.setNrCpf(rs.getString(5));
				resul.add(usuario);

				rs.close();
				return resul;
			} else {
				rs.close();
				return null;
			}
		} catch (SQLException e) {
			return null;
		} finally {
			ps.close();
			con.close();
		}
	}

	/**
	 * Seleção das informações de todos os usuários cadastrados.
	 * 
	 * @throws SQLException
	 */
	public List<UsuarioTO> selectAll() throws SQLException {

		usuario = new UsuarioTO();

		String sql = "SELECT * FROM T_GS_USUARIO";
		List<UsuarioTO> resul = new ArrayList<UsuarioTO>();

		PreparedStatement ps = null;

		try {
			ps = con.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();

			if (rs != null) {
				while (rs.next()) {
					usuario.setIdUsuario(rs.getInt(1));
					usuario.setNmCompleto(rs.getString(2));
					usuario.setDsEmail(rs.getString(3));
					usuario.setDsSenha(rs.getString(4));
					usuario.setNrCpf(rs.getString(5));
					resul.add(usuario);
				}

				rs.close();
				return resul;
			} else {
				return null;
			}
		} catch (SQLException e) {
			return null;
		} finally {
			ps.close();
			con.close();
		}

	}

}
